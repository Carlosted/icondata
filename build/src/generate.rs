use anyhow::Result;
use std::io::Write;
use tracing::{info, instrument};

use crate::{icon::Icon, package::Package, path};

const BASE_CARGO_TOML: &'static str = indoc::indoc!(
    r#"
    # ------------------------------------------------------------------------------------------
    # THIS FILE WAS GENERATED BY THE BUILD SCRIPT OF THIS CRATE.
    # REMEMBER TO MAKE MODIFICATION IN build/main.rs IF YOU WANT TO CHANGE THE BASE CONTENT!
    # ------------------------------------------------------------------------------------------

    [package]
    name = "leptos-icons"
    version = "0.1.0"
    edition = "2021"

    [dependencies]
    leptos = { version = "0.2", default-features = false }
    tracing = { version = "0.1", optional = true }

    [features]
    tracing = ["dep:tracing"]

"#
);

#[instrument(level = "info")]
pub(crate) fn generate_initial_cargo_toml() -> Result<()> {
    let cargo_path = path::leptos_icons_crate("Cargo.toml");

    info!(?cargo_path, "Removing old Cargo.toml");
    std::fs::remove_file(&cargo_path)?;

    info!(?cargo_path, "Writing BASE_CARGO_TOML as Cargo.toml");
    std::fs::OpenOptions::new()
        .create_new(true)
        .write(true)
        .open(&cargo_path)?
        .write_all(BASE_CARGO_TOML.as_bytes())?;

    Ok(())
}

// TODO: Return newtype?
pub(crate) fn gen_icon_components(package: Package, icons: Vec<Icon>) -> Vec<String> {
    info!(?package, "gen_icon_components");

    let mut icon_component = Vec::new();
    for icon in icons {
        icon_component.push(create_icon_component_string(
            &icon.feature_name,
            &icon.component_name,
            &icon.view,
        ));
    }

    icon_component
}

/// This creates the Rust code for a leptos component representing a single icon.
/// Feature-gated by the given feature name.
fn create_icon_component_string(feature_name: &str, component_name: &str, view: &str) -> String {
    indoc::formatdoc!(
        r#"
        #[cfg(feature = "{feature_name}")]
        /// *This icon requires the feature* `{feature_name}` *to be enabled*.
        #[::leptos::component]
        pub fn {component_name}(cx: ::leptos::Scope) -> impl ::leptos::IntoView {{
            ::leptos::view! {{ cx,
                {view}
            }}
        }}

        "#
    )
}
